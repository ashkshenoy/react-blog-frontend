{"ast":null,"code":"import axios from 'axios';\nconst authApi = axios.create({\n  baseURL: 'http://localhost:8080/auth',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst apiInstance = axios.create({\n  baseURL: 'http://localhost:8080/api',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for protected routes\napiInstance.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add response interceptor\napiInstance.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n    var _error$response$data, _error$response$data$;\n    // Only clear token if it's an auth error\n    const isAuthError = (_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.message) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.includes('token');\n    if (isAuthError) {\n      localStorage.removeItem('token');\n    }\n  }\n  return Promise.reject(error);\n});\nexport { authApi, apiInstance };","map":{"version":3,"names":["axios","authApi","create","baseURL","headers","apiInstance","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","_error$response$data","_error$response$data$","isAuthError","data","message","includes","removeItem"],"sources":["C:/Users/91998/Downloads/react-blog-frontend/src/api/axios.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst authApi = axios.create({\r\n    baseURL: 'http://localhost:8080/auth',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\nconst apiInstance = axios.create({\r\n    baseURL: 'http://localhost:8080/api',\r\n    headers: {\r\n        'Content-Type': 'application/json'\r\n    }\r\n});\r\n\r\n// Add request interceptor for protected routes\r\napiInstance.interceptors.request.use(\r\n    (config) => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n  \r\n  // Add response interceptor\r\n  apiInstance.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      if (error.response?.status === 403) {\r\n        // Only clear token if it's an auth error\r\n        const isAuthError = error.response.data?.message?.includes('token');\r\n        if (isAuthError) {\r\n          localStorage.removeItem('token');\r\n        }\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\nexport { authApi, apiInstance };"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAM,CAAC;EACzBC,OAAO,EAAE,4BAA4B;EACrCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;AAEF,MAAMC,WAAW,GAAGL,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,2BAA2B;EACpCC,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACAC,WAAW,CAACC,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACL,OAAO,CAACS,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAT,WAAW,CAACC,YAAY,CAACW,QAAQ,CAACT,GAAG,CAClCS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EAAA,IAAAI,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAAA,IAAAC,oBAAA,EAAAC,qBAAA;IAClC;IACA,MAAMC,WAAW,IAAAF,oBAAA,GAAGN,KAAK,CAACG,QAAQ,CAACM,IAAI,cAAAH,oBAAA,wBAAAC,qBAAA,GAAnBD,oBAAA,CAAqBI,OAAO,cAAAH,qBAAA,uBAA5BA,qBAAA,CAA8BI,QAAQ,CAAC,OAAO,CAAC;IACnE,IAAIH,WAAW,EAAE;MACfX,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;IAClC;EACF;EACA,OAAOX,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAEH,SAASb,OAAO,EAAEI,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}